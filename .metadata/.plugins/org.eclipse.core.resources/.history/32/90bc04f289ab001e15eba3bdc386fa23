package com.cgv.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.cgv.mapper.ManagerMapper;
import com.cgv.vo.Board;
import com.cgv.vo.Member;

@RequestMapping("/manager")
@Controller
public class ManagerController {
	
	@Autowired
	private ManagerMapper mapper;
	
	/*================================= movie ============================================*/
	
	@GetMapping(value="/movieManagement.do")
	public String movieManagement() {
		
		return "manager/movieManagement";
	}
	
	@GetMapping(value="/movieInsertForm.do")
	public String movieInsertForm() {
		
		return "manager/movieInsertForm";
	}
	
	
	
	/*================================= member ============================================*/
	
	@GetMapping(value="/memberManagement.do")
	public String memberManagement(Model model) {
		
		List<Member> list = mapper.getMemberList();
		
		model.addAttribute("list", list);
		
		return "manager/memberManagement";
	}
	
	@GetMapping(value="/modify.do")
	public String modify(Model model, HttpServletRequest request) {
		
		int num = Integer.parseInt(request.getParameter("num"));
		
		Member member =  mapper.getOneMember(num);
		
		model.addAttribute( "member", member );
		
		return "manager/memberModifyForm";
	}
	
	@PostMapping(value="/memberModifyPro.do")
	public String memberModifyPro(Model model, Member member) {
		
		System.out.println(member);
		mapper.updateMember(member);
		
		return "manager/memberModifyPro";
	}
	
	@GetMapping(value="/delete.do")
	public String deleteMember(Model model, HttpServletRequest request) {
		
		int num = Integer.parseInt(request.getParameter("num"));
		
		mapper.deleteMember(num);
				
		return "manager/memberDeletePro";
	}
	
	/*================================= board ============================================*/
	
	@GetMapping(value="/boardManagement.do")
	public String boardManagement(HttpServletRequest request, Model model) {
		
		//한페이지에 보여줄 글 개수
		int pageSize = 5;
		
		//현재 페이지 번호
		int currentPage = 1;
		if(request.getParameter("pageNum") != null) {
			currentPage = Integer.parseInt(request.getParameter("pageNum"));
		}
		
		//전체 글 개수
		int count = mapper.getAllCount(); 
		
		//현재 페이지의 시작글 인덱스 번호
		int startRow = (currentPage-1)*pageSize;
		
		List<Board> boardList = mapper.getAllBoard(startRow, pageSize);
		
		int number = count - (currentPage - 1) * pageSize;
		
		//페이징 보이는 쪽수
		int clickablePageCount = 5;
		int pageCount = count / pageSize + (count % pageSize == 0 ? 0 : 1);
		
		//첫 페이지
		int startPage = 0;
		if(currentPage % clickablePageCount != 0) {
			startPage = (currentPage / clickablePageCount) * clickablePageCount + 1;
		}else {
			startPage = (currentPage / clickablePageCount - 1) * clickablePageCount + 1;
		}
		
		int endPage = startPage + clickablePageCount - 1;
		if(endPage > pageCount) endPage = pageCount;
		
		model.addAttribute("boardList", boardList);
		model.addAttribute("number", number);
		model.addAttribute("count", count);
		model.addAttribute("currentPage", currentPage);
		model.addAttribute("pageSize", pageSize);
		
		model.addAttribute("clickablePageCount", clickablePageCount);
		model.addAttribute("pageCount", pageCount);
		model.addAttribute("startPage", startPage);
		model.addAttribute("endPage", endPage);
		
		return "manager/boardManagement";
	}
	
	@GetMapping(value="/boardInfo.do")
	public String boardInfo(HttpSession session,HttpServletRequest request, Model model) {
		
			int num = Integer.parseInt(request.getParameter("num"));	
			Board board = mapper.getOneBoard(num);
			model.addAttribute(board);
			
			return "manager/boardInfo";
	}
	
	@GetMapping(value = "/boardDelete.do")
	public String boardDelete(HttpServletRequest request) {
		
		int num = Integer.parseInt(request.getParameter("num"));
		mapper.boardDelete(num);
		
		return "redirect:boardManagement.do";
	}
	
	@GetMapping(value = "/boardReWriteForm.do")
	public String boardReWriteForm(HttpServletRequest request, Model model) {
		
		int num = Integer.parseInt(request.getParameter("num"));
		Board board = mapper.getOneBoard(num);
		model.addAttribute("board", board);
		
		return "manager/boardReWriteForm";
	}
	
	@PostMapping(value = "/boardReWritePro.do")
	public String boardReWritePro(Board board) {
		
		mapper.updateReBoard(board);
		mapper.reWriteBoard(board);
		
		return "redirect:boardManagement.do";
	}
	
	
	
}
